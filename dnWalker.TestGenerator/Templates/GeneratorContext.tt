<#@ template language="C#" linepragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="dnWalker.Parameters" #>
<#@ import namespace="dnWalker.TestGenerator.Parameters" #>
<#+
		protected Dictionary<ParameterRef, Type> VariableTypeLookup { get; } = new Dictionary<ParameterRef, Type>();
		protected Dictionary<ParameterRef, string> VariableNameLookup { get; } = new Dictionary<ParameterRef, string>();


		protected Type GetVariableType(IParameter parameter)
		{
            if (parameter == null) return null;

			ParameterRef reference = parameter.Reference;

			if (VariableTypeLookup.TryGetValue(reference, out Type type))
			{
				return type;
			}

			if (parameter is IPrimitiveValueParameter primitive)
            {
                type = Type.GetType(primitive.Type) ?? throw new Exception("Could not find the type!");
            }
            else if (parameter is IObjectParameter obj)
            {
                type = Type.GetType(obj.Type) ?? throw new Exception("Could not find the type!");
            }
            else if (parameter is IArrayParameter arr)
            {
                type = Type.GetType(arr.ElementType)?.MakeArrayType() ?? throw new Exception("Could not find the type!");
            }

            else
            {
                throw new Exception("Unexpected parameter type!");
            }

			VariableTypeLookup[reference] = type;
			return type;
		}

		protected string GetVariableName(IParameter parameter)
        {
            if (parameter == null) return null;

			ParameterRef reference = parameter.Reference;

            if (VariableNameLookup.TryGetValue(reference, out string name))
            {
                return name;
            }

            

            name = $"var_{reference}";
            
            VariableNameLookup[reference] = name;

            return name;
        }
#>