<#@ template language="C#" linepragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="dnWalker.Parameters" #>
<#@ import namespace="dnWalker.TestGenerator.Parameters" #>
<#@ output extension=".txt" #>
<#@ include file="TypeNameTemplate.tt" once="true" #>
<#@ include file="GeneratorContext.tt" once="true" #>
<#+
		protected void WriteSimpleDepencencyArrange(SimpleDependency simpleDependency)
		{
			string varName = GetVariableName(simpleDependency.Parameter);
			Type varType = GetVariableType(simpleDependency.Parameter);

			WriteTypeName(varType);
			Write(TemplateHelpers.WhiteSpace);
			Write(varName);
			Write(" = ");

			IParameter p = simpleDependency.Parameter;

			if (p is IPrimitiveValueParameter pp)
			{
				string literal = pp.Value?.ToString() ?? TemplateHelpers.GetDefaultLiteral(varType);
				Write(literal);
				return;
			}
			if (p is IArrayParameter ap)
			{
				if (ap.IsNull != false)
				{
					Write(TemplateHelpers.Null);
					return;
				}

				Type elementType = varType.GetElementType();



				if (elementType.IsPrimitive)
				{
					// array of primitive values => initialization using constants
					Write("new ");
					WriteTypeName(elementType);
					Write("[");
					Write((ap.GetLength()).ToString());
					Write("]");
					if (ap.GetLength() > 0)
					{
						Write(" { ");
						string defaultElementLiteral = TemplateHelpers.GetDefaultLiteral(elementType);

						WriteJoint(TemplateHelpers.Coma, ap.GetItems().Select(r => r.Resolve<IPrimitiveValueParameter>(ap.Context).Value?.ToString() ?? defaultElementLiteral), Write);

						Write(" }");
					}
				}
				else
				{
					// array of primitive values => initialization using constants
					Write("new ");
					WriteTypeName(elementType);
					Write("[");
					Write((ap.GetLength()).ToString());
					Write("]");
					if (ap.GetLength() > 0)
					{
						Write(" { ");
						string defaultElementLiteral = TemplateHelpers.GetDefaultLiteral(elementType);

						WriteJoint(TemplateHelpers.Coma, ap.GetItems().Select(r => GetVariableName(r.Resolve<IParameter>(ap.Context)) ?? defaultElementLiteral), Write);

						Write(" }");
					}
				}
			}
		}
#>