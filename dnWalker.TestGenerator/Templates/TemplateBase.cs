// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace dnWalker.TestGenerator.Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    using System.Reflection;
    using dnWalker.TestGenerator.Parameters;
    using dnWalker.Parameters;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class TemplateBase : TemplateBaseBase
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n");
            this.Write("\r\n");
            this.Write("\r\n");
            this.Write("\r\n");
            this.Write("\r\n");
            this.Write("\r\n");
            this.Write("\r\n");
            this.Write("\r\n");
 


            return this.GenerationEnvironment.ToString();
        }
 
		protected void WriteTypeName(Type type)
		{
			if (type.IsNested)
			{
				WriteTypeName(type.DeclaringType);
				Write(TemplateHelpers.Dot);
			}

			if (type.IsArray)
			{
				type = type.GetElementType();
				WriteTypeName(type);
				Write("[]");
			}
			else if (type.IsGenericType)
			{
				Write(TemplateHelpers.WithoutGenerics(TemplateHelpers.GetTypeNameOrAlias(type)));
				Write("<");
				
                Type[] genericArgs = type.GetGenericArguments();
                if (genericArgs.Length >= 1)
                {
                    WriteTypeName(genericArgs[0]);

                    for (int i = 1; i < genericArgs.Length; ++i)
                    {
                        Write(TemplateHelpers.Coma);
                        WriteTypeName(genericArgs[i]);
                    }
                }

				Write(">");
			}
			else
			{
				Write(TemplateHelpers.GetTypeNameOrAlias(type));
			}
		}


		protected void WriteJoint<T>(string separator, IEnumerable<T> items, Action<T> writeAction)
		{
			{
				T item = items.FirstOrDefault();
				if (item == null) return;
				writeAction(item);
			}

			foreach (T item in items.Skip(1))
			{
				Write(separator);
				writeAction(item);
			}
		}


		protected void WriteVariableDeclaration(Type type, string name)
		{
			if (type == null)
			{
				Write("var");
			}
			else 
			{
				WriteTypeName(type);
			}

			Write(TemplateHelpers.WhiteSpace);
			Write(name);
		}


		protected void WriteStaticMethodInvocation(MethodInvocationData data)
		{
			MethodInfo method = data.Method;
            Type declaringType = method.DeclaringType ?? throw new Exception("Cannot access the declaring type!");

			WriteTypeName(declaringType);

			Write(TemplateHelpers.Dot);

			if (method.IsGenericMethod)
			{
                Type[] genericParameters = method.GetGenericArguments();
                Write(method.Name);
				Write("<");
				
				WriteJoint(TemplateHelpers.Coma, genericParameters, WriteTypeName);

				Write(">");
			}
			else
			{
				Write(TemplateHelpers.WithoutGenerics(method.Name));
			}

			Write("(");

			if (data.Arguments.Length > 0)
			{
				WriteJoint(TemplateHelpers.Coma, data.Arguments, a => Write(a.Expression));
			}

			Write(")");
		}
		
		protected void WriteInstanceMethodInvocation(MethodInvocationData data)
		{
			MethodInfo method = data.Method;

			Write(data.Instance);

			Write(TemplateHelpers.Dot);

			if (method.IsGenericMethod)
			{
                Type[] genericParameters = method.GetGenericArguments();
                Write(method.Name);
				Write("<");
				
				WriteJoint(TemplateHelpers.Coma, genericParameters, WriteTypeName);

				Write(">");
			}
			else
			{
				Write(TemplateHelpers.WithoutGenerics(method.Name));
			}

			Write("(");

			if (data.Arguments.Length > 0)
			{
				WriteJoint(TemplateHelpers.Coma, data.Arguments, a => Write(a.Expression));
			}

			Write(")");
		}


		protected void WriteArrangeCode(Dependency dependency)
		{
			
			
			void WriteComplexDependencyArrange(ComplexDependency complexDependency)
			{
			}


			if (dependency is SimpleDependency simpleDependency)
			{
				WriteSimpleDepencencyArrange(simpleDependency);
			}
			else if (dependency is ComplexDependency complexDependency)
			{
				WriteComplexDependencyArrange(complexDependency);
			}

		}


		protected Dictionary<ParameterRef, Type> VariableTypeLookup { get; } = new Dictionary<ParameterRef, Type>();
		protected Dictionary<ParameterRef, string> VariableNameLookup { get; } = new Dictionary<ParameterRef, string>();


		protected Type GetVariableType(IParameter parameter)
		{
            if (parameter == null) return null;

			ParameterRef reference = parameter.Reference;

			if (VariableTypeLookup.TryGetValue(reference, out Type type))
			{
				return type;
			}

			if (parameter is IPrimitiveValueParameter primitive)
            {
                type = Type.GetType(primitive.Type) ?? throw new Exception("Could not find the type!");
            }
            else if (parameter is IObjectParameter obj)
            {
                type = Type.GetType(obj.Type) ?? throw new Exception("Could not find the type!");
            }
            else if (parameter is IArrayParameter arr)
            {
                type = Type.GetType(arr.ElementType)?.MakeArrayType() ?? throw new Exception("Could not find the type!");
            }

            else
            {
                throw new Exception("Unexpected parameter type!");
            }

			VariableTypeLookup[reference] = type;
			return type;
		}

		protected string GetVariableName(IParameter parameter)
        {
            if (parameter == null) return null;

			ParameterRef reference = parameter.Reference;

            if (VariableNameLookup.TryGetValue(reference, out string name))
            {
                return name;
            }

            

            name = $"var_{reference}";
            
            VariableNameLookup[reference] = name;

            return name;
        }


		protected void WriteSimpleDepencencyArrange(SimpleDependency simpleDependency)
		{
			string varName = GetVariableName(simpleDependency.Parameter);
			Type varType = GetVariableType(simpleDependency.Parameter);

			WriteTypeName(varType);
			Write(TemplateHelpers.WhiteSpace);
			Write(varName);
			Write(" = ");

			IParameter p = simpleDependency.Parameter;

			if (p is IPrimitiveValueParameter pp)
			{
				string literal = pp.Value?.ToString() ?? TemplateHelpers.GetDefaultLiteral(varType);
				Write(literal);
				return;
			}
			if (p is IArrayParameter ap)
			{
				if (ap.IsNull != false)
				{
					Write(TemplateHelpers.Null);
					return;
				}

				Type elementType = varType.GetElementType();



				if (elementType.IsPrimitive)
				{
					// array of primitive values => initialization using constants
					Write("new ");
					WriteTypeName(elementType);
					Write("[");
					Write((ap.GetLength()).ToString());
					Write("]");
					if (ap.GetLength() > 0)
					{
						Write(" { ");
						string defaultElementLiteral = TemplateHelpers.GetDefaultLiteral(elementType);

						WriteJoint(TemplateHelpers.Coma, ap.GetItems().Select(r => r.Resolve<IPrimitiveValueParameter>(ap.Context).Value?.ToString() ?? defaultElementLiteral), Write);

						Write(" }");
					}
				}
				else
				{
					// array of primitive values => initialization using constants
					Write("new ");
					WriteTypeName(elementType);
					Write("[");
					Write((ap.GetLength()).ToString());
					Write("]");
					if (ap.GetLength() > 0)
					{
						Write(" { ");
						string defaultElementLiteral = TemplateHelpers.GetDefaultLiteral(elementType);

						WriteJoint(TemplateHelpers.Coma, ap.GetItems().Select(r => GetVariableName(r.Resolve<IParameter>(ap.Context)) ?? defaultElementLiteral), Write);

						Write(" }");
					}
				}
			}
		}


		protected void WriteComplesDepencencyArrange(ComplexDependency complexDependency)
		{

		}

    }
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class TemplateBaseBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
