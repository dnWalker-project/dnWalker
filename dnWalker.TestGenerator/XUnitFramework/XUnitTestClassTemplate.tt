<#@ template debug="false" hostspecific="false" language="C#" visibility="internal" inherits="Templates.TemplateBase"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="dnWalker.TypeSystem" #>
<#@ import namespace="dnWalker.Parameters" #>
<#@ import namespace="dnWalker.TestGenerator.Parameters" #>
<#@ import namespace="dnWalker.TestGenerator.TestClasses" #>
<#@ output extension=".tt.cs" #>
<# 
	// basic namespaces
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
<#
	// test namespaces
#>
using FluentAssertions;
using Xunit;
using Moq;
<#
	// parameter namespaces
	foreach (string nsName in Context.GetNamespaces())
	{
#>
using <#= nsName #>;
<#
	}
#>
<#
	// test class declaration
#>
namespace <#= Context.TestNamespaceName #>
{
<# PushIndent(); #>
public class <#= Context.TestClassName #>
{
<# PushIndent(); #>
<#
	// for each assertion schema generate a test method
	int i = 1;
	foreach (AssertionSchema schema in Context.GetSchemas())
	{
#>
[Fact]
public void Test_<#= i #>_<#= GetSchemaName(schema) #>()
{
<# PushIndent(); #>
// arrange
<# WriteArrange(schema); #>
// act
<# WriteAct(schema); #>
// assert
<# WriteAssert(schema); #>
<# PopIndent(); #>
}
<#
		++i;
	}
#>
<# PopIndent(); #>
}
<# PopIndent(); #>
}
<#+
        private static string GetSchemaName(AssertionSchema schema)
        {
            switch (schema)
            {
                case ExceptionSchema exception: 
                    return "Exception";
                
                case ReturnValueSchema retValue: 
                    return "ReturnValue";

                case ArrayElementSchema arrayElement: 
                    return $"ArrayElements_{arrayElement.InputState.Reference}";

                case ObjectFieldSchema objectField: 
                    return $"FieldValues_{objectField.InputState.Reference}";

                default: 
                    throw new ArgumentException($"Unexpected schema type: {schema.GetType().Name}", nameof(schema));
            }
    	}
#>
