<#@ template debug="false" hostspecific="false" language="C#" visibility="internal" inherits="Templates.TemplateBase"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="dnWalker.TypeSystem" #>
<#@ import namespace="dnWalker.Parameters" #>
<#@ import namespace="dnWalker.TestGenerator.Parameters" #>
<#@ import namespace="dnWalker.TestGenerator.TestClasses" #>
<#@ output extension=".tt.cs" #>
<#
            ExplorationIterationData iterationData = IterationData;
            ExplorationData explorationData = ExplorationData;

            // setup the namespaces:
            HashSet<string> namespaceNames = new HashSet<string>();

            foreach (IParameter p in iterationData.StartingParameterSet.Parameters.Values)
            {
                namespaceNames.Add(p.Type.Namespace);
            }
            
            foreach (IParameter p in iterationData.EndingParameterSet.Parameters.Values)
            {
                namespaceNames.Add(p.Type.Namespace);
            }
#>
<# 
            // basic test namespaces
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using FluentAssertions;
using Xunit;
using Moq;
<#
            // include namespaces
            foreach (string namespaceName in namespaceNames)
            {
#>
using <#= namespaceName #>;
<#
            }
#>

<#
            MethodSignature method = ExplorationData.MethodSignature;
            TypeSignature declaringType = method.DeclaringType;
#>
public class <#= declaringType.Name #>_<#= method.Name #>
{

}
