<?xml version="1.0" encoding="utf-8" ?>
<Explorations>
    <!-- Method with result, multiple iterations, primitive arguments -->
    <Exploration AssemblyName="Examples, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"
                 AssemblyFileName="..\..\..\..\Examples\bin\debug\Examples.exe"
                 MethodSignature="System.Boolean Examples.TestGeneration.Static.PrimitiveArgs::IsGreaterThan5(System.Int32)"
                 IsStatic="true"
                 Solver="dnWalker.Z3.Solver"
                 Failed="false">
        <Iteration IterationNumber="1">
            <Parameters>
                <PrimitiveValue Type="System.Int32" Name="x">0</PrimitiveValue>
                <PrimitiveValue Type="System.Boolean" Name="#__RESULT__">false</PrimitiveValue>
            </Parameters>
        </Iteration>
        <Iteration IterationNumber="2">
            <Parameters>
                <PrimitiveValue Type="System.Int32" Name="x">6</PrimitiveValue>
                <PrimitiveValue Type="System.Boolean" Name="#__RESULT__">true</PrimitiveValue>
            </Parameters>
        </Iteration>
    </Exploration>
    
    <!-- Method with result, multiple iterations, complex arguments -->
    <Exploration AssemblyName="Examples, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" 
                 AssemblyFileName="..\..\..\..\Examples\bin\debug\Examples.exe" 
                 MethodSignature="System.Boolean Examples.TestGeneration.Static.ComplexArgs::Return_Sum_Of_IntFields(Examples.TestGeneration.ClassWithManyFields)" 
                 IsStatic="true" 
                 Solver="dnWalker.Z3.Solver" 
                 Failed="false">
        <!-- the argument should be null in this case => we know nothing about it -->
        <!-- and it should throw NullReferenceException - TODO: properly export these information && to the exception thrown assertions within the template -->
        <Iteration IterationNumber="1">
            <Parameters/>
        </Iteration>

        <Iteration IterationNumber="2">
            <Parameters>
                <Object Type="Examples.TestGeneration.ClassWithManyFields" Name="instance" IsNull="false"/>
                <PrimitiveValue Type="System.Int32" Name="#__RESULT__">0</PrimitiveValue>
            </Parameters>
        </Iteration>
        
        <!-- we will specify a few fields -->
        <Iteration IterationNumber="3">
            <Parameters>
                <Object Type="Examples.TestGeneration.ClassWithManyFields" Name="instance" IsNull="false">
                    <Field Name="I1">
                        <PrimitiveValue Type="System.Int32" Name="instance:I1">5</PrimitiveValue>
                    </Field>
                    <Field Name="I3">
                        <PrimitiveValue Type="System.Int32" Name="instance:I3">8</PrimitiveValue>
                    </Field>
                </Object>
                <PrimitiveValue Type="System.Int32" Name="#__RESULT__">13</PrimitiveValue>
            </Parameters>
        </Iteration>
    </Exploration>

    <!-- Method which works with a primitive and complex parameters -->
    <Exploration AssemblyName="Examples, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"
                 AssemblyFileName="..\..\..\..\Examples\bin\debug\Examples.exe"
                 MethodSignature="Examples.TestGeneration.ClassWithManyFields Examples.TestGeneration.Static.ComplexArgs::Get_ManyFields_If_Any_IntegerField_Matches_Arg(Examples.TestGeneration.ClassReferencingAnotherClass,System.Int32)"
                 IsStatic="true"
                 Solver="dnWalker.Z3.Solver"
                 Failed="false">

        <!-- just one iteration for testing purposes -->
        <!-- arg is not 0, IntegerField1 is -5, IntegerField2 is 10, ManyFields field is not null -->
        <!-- TODO: somehow handle AliasParameters -->
        <Iteration IterationNumber="2">
            <Parameters>
                <Object Type="Examples.TestGeneration.ClassReferencingAnotherClass" Name="myObject" IsNull="false">
                    <Field Name="IntegerField1">
                        <PrimitiveValue Type="System.Int32" Name="myObject:IntegerField1">-5</PrimitiveValue>
                    </Field>
                    <Field Name="IntegerField2">
                        <PrimitiveValue Type="System.Int32" Name="myObject:IntegerField2">10</PrimitiveValue>
                    </Field>
                    <Field Name="ManyFields">
                        <Object Type="Examples.TestGeneration.ClassWithManyFields" Name="myObject:ManyFields" IsNull="false">
                            <Field Name="D3">
                                <PrimitiveValue Type="System.Double" Name="myObject:ManyFields:D3">0.128</PrimitiveValue>
                            </Field>
                        </Object>
                    </Field>
                </Object>
                <PrimitiveValue Type="System.Int32" Name="arg">-5</PrimitiveValue>
                <!-- <AliasParameter Type="Examples.TestGeneration.ClassWithManyFields" Name="#__RESULT__" ReferencedParameter="myObject:ManyFields"/> -->
                <Object Type="Examples.TestGeneration.ClassWithManyFields" Name="#__RESULT__" IsNull="false">
                    <Field Name="D3">
                        <PrimitiveValue Type="System.Double" Name="myObject:ManyFields:D3">0.128</PrimitiveValue>
                    </Field>
                </Object>
            </Parameters>
        </Iteration>
    </Exploration>
</Explorations>