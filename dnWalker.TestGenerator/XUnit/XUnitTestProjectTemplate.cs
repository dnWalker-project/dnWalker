// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace dnWalker.TestGenerator.XUnit
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestProjectTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    internal partial class XUnitTestProjectTemplate : XUnitTestProjectTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            
            #line 6 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestProjectTemplate.tt"
 ITestProjectContext context = Context; 
            
            #line default
            #line hidden
            this.Write("\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n    <PropertyGroup>\r\n");
            
            #line 11 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestProjectTemplate.tt"

	if (context.Targets.Count == 0)
	{

            
            #line default
            #line hidden
            this.Write("        <TargetFramework>");
            
            #line 15 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestProjectTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FallbackTargetFramework));
            
            #line default
            #line hidden
            this.Write("</TargetFramework>\r\n");
            
            #line 16 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestProjectTemplate.tt"

	}
	else if (Context.Targets.Count == 1)
	{

            
            #line default
            #line hidden
            this.Write("        <TargetFramework>");
            
            #line 21 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestProjectTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(context.Targets[0]));
            
            #line default
            #line hidden
            this.Write("</TargetFramework>\r\n");
            
            #line 22 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestProjectTemplate.tt"

	}
	else
	{

            
            #line default
            #line hidden
            this.Write("        <TargetFrameworks>");
            
            #line 27 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestProjectTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(JoinTokens(context.Targets)));
            
            #line default
            #line hidden
            this.Write("</TargetFrameworks>\r\n");
            
            #line 28 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestProjectTemplate.tt"

	}

            
            #line default
            #line hidden
            this.Write("        <IsPackable>false</IsPackable>\r\n        <Nullable>");
            
            #line 32 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestProjectTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(context.NullableEnable ? "enable" : "disable"));
            
            #line default
            #line hidden
            this.Write("</Nullable>\r\n    </PropertyGroup>\r\n\r\n");
            
            #line 35 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestProjectTemplate.tt"
 
	// package references 
	if (BasePackages.Count > 0 || context.PackageReferencies.Count > 0)
	{

            
            #line default
            #line hidden
            this.Write("    <ItemGroup>\r\n");
            
            #line 41 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestProjectTemplate.tt"

		foreach (PackageReference p in BasePackages)
		{
			WritePackageReference(p);
		}

            
            #line default
            #line hidden
            
            #line 47 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestProjectTemplate.tt"

		foreach (PackageReference p in context.PackageReferencies)
		{
			WritePackageReference(p);
		}

            
            #line default
            #line hidden
            this.Write("    </ItemGroup>\r\n\r\n");
            
            #line 55 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestProjectTemplate.tt"

	}

	// project references
	if (context.ProjectReferencies.Count > 0)
	{

            
            #line default
            #line hidden
            this.Write("    <ItemGroup>\r\n");
            
            #line 63 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestProjectTemplate.tt"

		foreach (string project in context.ProjectReferencies)
		{
			WriteProjectReference(project);
		}

            
            #line default
            #line hidden
            this.Write("    </ItemGroup>\r\n\r\n");
            
            #line 71 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestProjectTemplate.tt"

	}
	// service references
	if (BaseServices.Count > 0 || context.Services.Count > 0)
	{

            
            #line default
            #line hidden
            this.Write("    <ItemGroup>\r\n");
            
            #line 78 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestProjectTemplate.tt"

		foreach (Guid s in BaseServices)
		{
			WriteServiceReference(s);
		}

            
            #line default
            #line hidden
            
            #line 84 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestProjectTemplate.tt"

		foreach (Guid s in context.Services)
		{
			WriteServiceReference(s);
		}

            
            #line default
            #line hidden
            this.Write("    </ItemGroup>\r\n");
            
            #line 91 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestProjectTemplate.tt"

	}

            
            #line default
            #line hidden
            this.Write("</Project>\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 95 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestProjectTemplate.tt"

	private static string JoinTokens(IEnumerable<string> tokens)
	{
		return string.Join("; ", tokens);
	}

        
        #line default
        #line hidden
        
        #line 101 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestProjectTemplate.tt"

	private void WritePackageReference(PackageReference p)
	{

        
        #line default
        #line hidden
        
        #line 104 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestProjectTemplate.tt"
this.Write("        <PackageReference Include=\"");

        
        #line default
        #line hidden
        
        #line 105 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestProjectTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(p.Name));

        
        #line default
        #line hidden
        
        #line 105 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestProjectTemplate.tt"
this.Write("\" Version=\"");

        
        #line default
        #line hidden
        
        #line 105 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestProjectTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(p.Version));

        
        #line default
        #line hidden
        
        #line 105 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestProjectTemplate.tt"
this.Write("\"");

        
        #line default
        #line hidden
        
        #line 105 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestProjectTemplate.tt"

		if (p.IncludeAssets.Count > 0 || p.ExcludeAssets.Count > 0 || p.PrivateAssets.Count > 0)
		{

        
        #line default
        #line hidden
        
        #line 108 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestProjectTemplate.tt"
this.Write(">\r\n");

        
        #line default
        #line hidden
        
        #line 109 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestProjectTemplate.tt"

			if (p.IncludeAssets.Count > 0)
			{

        
        #line default
        #line hidden
        
        #line 112 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestProjectTemplate.tt"
this.Write("            <IncludeAssets>");

        
        #line default
        #line hidden
        
        #line 113 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestProjectTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(JoinTokens(p.IncludeAssets)));

        
        #line default
        #line hidden
        
        #line 113 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestProjectTemplate.tt"
this.Write("</IncludeAssets>\r\n");

        
        #line default
        #line hidden
        
        #line 114 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestProjectTemplate.tt"

			}
			if (p.ExcludeAssets.Count > 0)
			{

        
        #line default
        #line hidden
        
        #line 118 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestProjectTemplate.tt"
this.Write("            <ExcludeAssets>");

        
        #line default
        #line hidden
        
        #line 119 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestProjectTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(JoinTokens(p.ExcludeAssets)));

        
        #line default
        #line hidden
        
        #line 119 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestProjectTemplate.tt"
this.Write("</ExcludeAssets>\r\n");

        
        #line default
        #line hidden
        
        #line 120 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestProjectTemplate.tt"

			}
			if (p.PrivateAssets.Count > 0)
			{

        
        #line default
        #line hidden
        
        #line 124 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestProjectTemplate.tt"
this.Write("            <PrivateAssets>");

        
        #line default
        #line hidden
        
        #line 125 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestProjectTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(JoinTokens(p.PrivateAssets)));

        
        #line default
        #line hidden
        
        #line 125 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestProjectTemplate.tt"
this.Write("</PrivateAssets>\r\n");

        
        #line default
        #line hidden
        
        #line 126 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestProjectTemplate.tt"

			}

        
        #line default
        #line hidden
        
        #line 128 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestProjectTemplate.tt"
this.Write("        </PackageReference>\r\n");

        
        #line default
        #line hidden
        
        #line 130 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestProjectTemplate.tt"

		}
		else
		{

        
        #line default
        #line hidden
        
        #line 134 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestProjectTemplate.tt"
this.Write(" />\r\n");

        
        #line default
        #line hidden
        
        #line 135 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestProjectTemplate.tt"

		}
	}

        
        #line default
        #line hidden
        
        #line 139 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestProjectTemplate.tt"

	private void WriteProjectReference(string project)
	{

        
        #line default
        #line hidden
        
        #line 142 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestProjectTemplate.tt"
this.Write("        <ProjectReference Include=\"");

        
        #line default
        #line hidden
        
        #line 143 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestProjectTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(project));

        
        #line default
        #line hidden
        
        #line 143 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestProjectTemplate.tt"
this.Write("\" />\r\n");

        
        #line default
        #line hidden
        
        #line 144 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestProjectTemplate.tt"

	}

        
        #line default
        #line hidden
        
        #line 147 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestProjectTemplate.tt"

	private void WriteServiceReference(Guid serviceGuid)
	{

        
        #line default
        #line hidden
        
        #line 150 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestProjectTemplate.tt"
this.Write("        <Service Include=\"{");

        
        #line default
        #line hidden
        
        #line 151 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestProjectTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(serviceGuid));

        
        #line default
        #line hidden
        
        #line 151 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestProjectTemplate.tt"
this.Write("}\" />\r\n");

        
        #line default
        #line hidden
        
        #line 152 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestProjectTemplate.tt"

	}

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    internal class XUnitTestProjectTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
