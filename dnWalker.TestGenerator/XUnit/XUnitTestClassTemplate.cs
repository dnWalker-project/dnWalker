// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace dnWalker.TestGenerator.XUnit
{
    using System.Linq;
    using System.Text;
    using System.Reflection;
    using System.Collections.Generic;
    using dnWalker.Parameters;
    using dnWalker.TestGenerator.Reflection;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class XUnitTestClassTemplate : XUnitTestClassTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("// This file was generated by dnWalker.TestGenerator tool ");
            
            #line 9 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DateTime.Now.ToString("dd/MM/yyyy - HH:mm:ss")));
            
            #line default
            #line hidden
            this.Write("\r\n\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.IO;\r\nusing Sys" +
                    "tem.Linq;\r\nusing System.Text;\r\n\r\nusing FluentAssertions;\r\n\r\nusing Xunit;\r\n\r\nusin" +
                    "g Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject;\r\n\r\nnamespace ");
            
            #line 23 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TestData.TestNamespaceName));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n    public class ");
            
            #line 25 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TestData.TestClassName));
            
            #line default
            #line hidden
            this.Write("\r\n    {\r\n\r\n        public ");
            
            #line 28 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TestData.TestClassName));
            
            #line default
            #line hidden
            this.Write("()\r\n        {\r\n            //TODO: if necessary initialize environment hooks (tod" +
                    "o in base class?), something to catch console output etc.\r\n        }\r\n");
            
            #line 32 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
 // generate a fact test for each iteration
foreach(ExplorationIterationData iterationData in TestData.ExplorationData.Iterations)
{
    WriteTestMethod(iterationData);
}

            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 39 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
 // generate initialization methods 
WriteObjectInitializationMethods();

            
            #line default
            #line hidden
            this.Write("    }\r\n}\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 45 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
 
// generate initialization methods
private void WriteObjectInitializationMethods()
{
    // pass through each iteration data input parameters & find out what fields are specified

    Dictionary<string, HashSet<string>> initializedFields = new Dictionary<string, HashSet<string>>();

    foreach (ExplorationIterationData iterationData in TestData.ExplorationData.Iterations)
    {
        foreach (ObjectParameter objectParameter in iterationData.ParameterStore.GetAllParameters().OfType<ObjectParameter>())
        {
            foreach (string fieldName in objectParameter.GetKnownFields().Select(p => p.Key))
            {
                if (!initializedFields.TryGetValue(objectParameter.TypeName, out HashSet<string>? fields))
                {
                    fields = new HashSet<string>();
                    initializedFields[objectParameter.TypeName] = fields;
                }

                fields.Add(fieldName);
            }
        }
    }

    foreach (KeyValuePair<string, HashSet<string>> typeFields in initializedFields)
    {
        WriteObjectInitializationMethod(typeFields.Key, typeFields.Value);
    }
}

        
        #line default
        #line hidden
        
        #line 77 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
 
// generate a single initialize object method
private void WriteObjectInitializationMethod(string fullTypeName, IEnumerable<string> fieldsToInitialize)
{
    // using this method, because for Type.GetType(string) full type name and assembly name is needed.
    Type type = AppDomain.CurrentDomain.GetType(fullTypeName) ?? throw new ArgumentException("Cannot find specified type.");

    List<KeyValuePair<string, Type>> fieldInfos = fieldsToInitialize
            .Where(f => f != ReferenceTypeParameter.IsNullName && f != ArrayParameter.LengthName)
            .Select(f => KeyValuePair.Create(f, type.GetField(f)?.FieldType ?? throw new Exception("Cannot find specified field.")))
            .ToList();

        
        #line default
        #line hidden
        
        #line 88 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write("        public static ");

        
        #line default
        #line hidden
        
        #line 89 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(type.Name));

        
        #line default
        #line hidden
        
        #line 89 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write(" Initialize_");

        
        #line default
        #line hidden
        
        #line 89 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(type.Name));

        
        #line default
        #line hidden
        
        #line 89 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write("(");

        
        #line default
        #line hidden
        
        #line 89 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
 
        
        for (int i = 0; i < fieldInfos.Count; ++i)
        {
            KeyValuePair<string, Type> f = fieldInfos[i];
            
        
        #line default
        #line hidden
        
        #line 94 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(f.Value.Name));

        
        #line default
        #line hidden
        
        #line 94 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write(" value_");

        
        #line default
        #line hidden
        
        #line 94 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(f.Key));

        
        #line default
        #line hidden
        
        #line 94 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write(" = ");

        
        #line default
        #line hidden
        
        #line 94 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
 WriteDefaultValue(f.Value);

            if (i < fieldInfos.Count - 1)
            {
                
        
        #line default
        #line hidden
        
        #line 98 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write(", ");

        
        #line default
        #line hidden
        
        #line 98 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"

            }
        }
        
        
        #line default
        #line hidden
        
        #line 101 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write(")\r\n        {\r\n");

        
        #line default
        #line hidden
        
        #line 103 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
 // create instance of the initialized object, TODO: based on whether default constructor exists, chose between new() and external, user-defined method 
        
        #line default
        #line hidden
        
        #line 103 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write("            ");

        
        #line default
        #line hidden
        
        #line 104 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(type.Name));

        
        #line default
        #line hidden
        
        #line 104 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write(" ");

        
        #line default
        #line hidden
        
        #line 104 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(type.Name));

        
        #line default
        #line hidden
        
        #line 104 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write("_instance = new ");

        
        #line default
        #line hidden
        
        #line 104 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(type.Name));

        
        #line default
        #line hidden
        
        #line 104 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write("();\r\n\r\n");

        
        #line default
        #line hidden
        
        #line 106 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
 // create private object instance to set the fields 
        
        #line default
        #line hidden
        
        #line 106 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write("            PrivateObject po = new PrivateObject(");

        
        #line default
        #line hidden
        
        #line 107 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(type.Name));

        
        #line default
        #line hidden
        
        #line 107 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write("_instance);\r\n            \r\n");

        
        #line default
        #line hidden
        
        #line 109 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
 // set all field to the values provided via arguments 
        foreach (string fieldName in fieldInfos.Select(p => p.Key))
        {

        
        #line default
        #line hidden
        
        #line 112 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write("            po.SetField(\"");

        
        #line default
        #line hidden
        
        #line 113 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(fieldName));

        
        #line default
        #line hidden
        
        #line 113 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write("\", value_");

        
        #line default
        #line hidden
        
        #line 113 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(fieldName));

        
        #line default
        #line hidden
        
        #line 113 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write(");\r\n");

        
        #line default
        #line hidden
        
        #line 114 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"

        }

        
        #line default
        #line hidden
        
        #line 116 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write("            return ");

        
        #line default
        #line hidden
        
        #line 117 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(type.Name));

        
        #line default
        #line hidden
        
        #line 117 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write("_instance;\r\n        }\r\n");

        
        #line default
        #line hidden
        
        #line 119 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"

}

        
        #line default
        #line hidden
        
        #line 123 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
 // generate a single fact test method
private void WriteTestMethod(ExplorationIterationData iterationData)
{

        
        #line default
        #line hidden
        
        #line 126 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write("\r\n        [Fact]\r\n        public void Test_");

        
        #line default
        #line hidden
        
        #line 129 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(TestData.SUTMethod.Name));

        
        #line default
        #line hidden
        
        #line 129 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write("_");

        
        #line default
        #line hidden
        
        #line 129 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(iterationData.IterationNumber));

        
        #line default
        #line hidden
        
        #line 129 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write("()\r\n        {\r\n            // TODO: initialize environment (static members etc)\r\n" +
        "            // initialize method args\r\n");

        
        #line default
        #line hidden
        
        #line 133 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"

    MethodInfo sutMethod = TestData.SUTMethod;
    Type sutType = TestData.SUTType;
    ParameterStore parameters = iterationData.ParameterStore;

    foreach (ParameterInfo pi in sutMethod.GetParameters())
    {
        string pName = pi.Name!;
        Type pType = pi.ParameterType;

        WriteVariableInitialization(pType, pName == ParameterStore.ThisParameterName ? "sutInstance" : pName, pName, parameters);
    }

        
        #line default
        #line hidden
        
        #line 145 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write("          \r\n\r\n            // TODO: initialize expected result environment (standa" +
        "rd output...)\r\n            // TODO: initialize expected result\r\n");

        
        #line default
        #line hidden
        
        #line 149 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"

    // create args string
    string methodArgsString = string.Join(", ", sutMethod.GetParameters().Select(pi => pi.Name));

    // invoke the method
    if (sutMethod.IsStatic)
    {
        if (sutMethod.ReturnType == typeof(void))
        {

        
        #line default
        #line hidden
        
        #line 158 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write("\r\n            // invoke the method itself\r\n            ");

        
        #line default
        #line hidden
        
        #line 161 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(sutType.Name));

        
        #line default
        #line hidden
        
        #line 161 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write(".");

        
        #line default
        #line hidden
        
        #line 161 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(sutMethod.Name));

        
        #line default
        #line hidden
        
        #line 161 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write("(");

        
        #line default
        #line hidden
        
        #line 161 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(methodArgsString));

        
        #line default
        #line hidden
        
        #line 161 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write(");\r\n");

        
        #line default
        #line hidden
        
        #line 162 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"

        }
        else
        {

            // initialize expected result
            WriteVariableInitialization(sutMethod.ReturnType, "expectedResult", ParameterStore.ResultParameterName, parameters);


        
        #line default
        #line hidden
        
        #line 170 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write("\r\n            // invoke the method itself\r\n            ");

        
        #line default
        #line hidden
        
        #line 173 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(sutMethod.ReturnType.Name));

        
        #line default
        #line hidden
        
        #line 173 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write(" result = ");

        
        #line default
        #line hidden
        
        #line 173 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(sutType.Name));

        
        #line default
        #line hidden
        
        #line 173 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write(".");

        
        #line default
        #line hidden
        
        #line 173 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(sutMethod.Name));

        
        #line default
        #line hidden
        
        #line 173 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write("(");

        
        #line default
        #line hidden
        
        #line 173 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(methodArgsString));

        
        #line default
        #line hidden
        
        #line 173 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write(");\r\n\r\n            // assert result and expected result\r\n            result.Should" +
        "().Be(expectedResult);\r\n");

        
        #line default
        #line hidden
        
        #line 177 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"

        }
    }
    else // TODO: find out how the signature for instance method should work, e.g. whether "hidden this" is one of the parameters or not...
    {
    }

        
        #line default
        #line hidden
        
        #line 183 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write("        }\r\n");

        
        #line default
        #line hidden
        
        #line 185 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"

}

        
        #line default
        #line hidden
        
        #line 188 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
  
private void WriteVariableInitialization(Type variableType, string variableName, string parameterName, ParameterStore store)
{
    if (store.TryGetParameter(parameterName, out Parameter parameter))
    {

        
        #line default
        #line hidden
        
        #line 193 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write("            ");

        
        #line default
        #line hidden
        
        #line 194 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(variableType.Name));

        
        #line default
        #line hidden
        
        #line 194 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write(" ");

        
        #line default
        #line hidden
        
        #line 194 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(variableName));

        
        #line default
        #line hidden
        
        #line 194 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write(" = ");

        
        #line default
        #line hidden
        
        #line 194 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
 WriteRightHandParameterInitialization(parameter); 
        
        #line default
        #line hidden
        
        #line 194 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write(";\r\n");

        
        #line default
        #line hidden
        
        #line 195 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"

    }
    else
    {
        // parameter will be initialized as default

        
        #line default
        #line hidden
        
        #line 200 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write("            ");

        
        #line default
        #line hidden
        
        #line 201 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(variableType.Name));

        
        #line default
        #line hidden
        
        #line 201 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write(" ");

        
        #line default
        #line hidden
        
        #line 201 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(variableName));

        
        #line default
        #line hidden
        
        #line 201 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write(" = ");

        
        #line default
        #line hidden
        
        #line 201 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
 WriteDefaultValue(variableType); 
        
        #line default
        #line hidden
        
        #line 201 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write(";\r\n");

        
        #line default
        #line hidden
        
        #line 202 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"

     }
}

        
        #line default
        #line hidden
        
        #line 207 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
 
private void WriteRightHandParameterInitialization(Parameter p)
{
    PushIndent("    ");
    switch(p)
    {
        case PrimitiveValueParameter primitiveValue:
            WriteRightHandParameterInitialization(primitiveValue);
            break;

        case ObjectParameter objectParameter:
            WriteRightHandParameterInitialization(objectParameter);
            break;
    }
    PopIndent();
}

private void WriteRightHandParameterInitialization(PrimitiveValueParameter p)
{
    Type type = AppDomain.CurrentDomain.GetType(p.TypeName);

    object value = p.GetValue();
    if (value != null)
    {
        
        
        #line default
        #line hidden
        
        #line 231 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(value.ToString()));

        
        #line default
        #line hidden
        
        #line 231 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"

    }
    else
    {
        WriteDefaultValue(type);
    }
}

private void WriteRightHandParameterInitialization(ObjectParameter p)
{
    Type type = AppDomain.CurrentDomain.GetType(p.TypeName);

    if (p.IsNull)
    {
        // initialize as null
        
        
        #line default
        #line hidden
        
        #line 246 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write("null");

        
        #line default
        #line hidden
        
        #line 246 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"

    }
    else
    {
        // we will invoke the initialize method
        List<KeyValuePair<string, Parameter>> fields = p.GetKnownFields().ToList();
        if (fields.Count == 0)
        {
            // now fields to initialize, just invoke the method without any arguments
            
        
        #line default
        #line hidden
        
        #line 255 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write("Initialize_");

        
        #line default
        #line hidden
        
        #line 255 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(type.Name));

        
        #line default
        #line hidden
        
        #line 255 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write("()");

        
        #line default
        #line hidden
        
        #line 255 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"

        }
        else
        {
            // initialize each field, recursively on its own line
            
        
        #line default
        #line hidden
        
        #line 260 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write("Initialize_");

        
        #line default
        #line hidden
        
        #line 260 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(type.Name));

        
        #line default
        #line hidden
        
        #line 260 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write("\r\n        (\r\n");

        
        #line default
        #line hidden
        
        #line 262 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
 
            for (int i = 0; i < fields.Count; ++i)
            {
                KeyValuePair<string, Parameter> field = fields[i];

        
        #line default
        #line hidden
        
        #line 266 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write("            value_");

        
        #line default
        #line hidden
        
        #line 267 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(field.Key));

        
        #line default
        #line hidden
        
        #line 267 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write(": ");

        
        #line default
        #line hidden
        
        #line 267 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
 WriteRightHandParameterInitialization(field.Value);
                if (i < fields.Count - 1)
                {
                    
        
        #line default
        #line hidden
        
        #line 270 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write(", ");

        
        #line default
        #line hidden
        
        #line 270 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"

                }
                WriteLine("");
            }

        
        #line default
        #line hidden
        
        #line 274 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write("        )");

        
        #line default
        #line hidden
        
        #line 275 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"

        }
    }
}

        
        #line default
        #line hidden
        
        #line 281 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
 
private void WriteDefaultValue(Type type)
{
    if (!type.IsValueType)
    {
        
        
        #line default
        #line hidden
        
        #line 286 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write("null");

        
        #line default
        #line hidden
        
        #line 286 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"

    }
    else
    {
        switch(Type.GetTypeCode(type))
        {
            case TypeCode.Byte:
            case TypeCode.SByte:
            case TypeCode.UInt16:
            case TypeCode.UInt32:
            case TypeCode.UInt64:
            case TypeCode.Int16:
            case TypeCode.Int32:
            case TypeCode.Int64:
            case TypeCode.Decimal:
            case TypeCode.Double:
            case TypeCode.Single:
        
        
        #line default
        #line hidden
        
        #line 303 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write("0");

        
        #line default
        #line hidden
        
        #line 303 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"

              break;
            default:
        
        
        #line default
        #line hidden
        
        #line 306 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write("default(");

        
        #line default
        #line hidden
        
        #line 306 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(type.Name));

        
        #line default
        #line hidden
        
        #line 306 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"
this.Write(")");

        
        #line default
        #line hidden
        
        #line 306 "C:\Users\hejlb\Documents\CVUT-FEL\MGR\Diplomka\src\dnWalker\dnWalker.TestGenerator\XUnit\XUnitTestClassTemplate.tt"

              break;
        }
    }
}

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class XUnitTestClassTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
