// This file was generated by dnWalker.TestGenerator tool 09. 01. 2022 - 09:51:08
#nullable enable

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

using FluentAssertions;

using Xunit;

using Moq;

namespace Examples.Concolic.Features.Objects.Tests
{
	public class MethodsWithObjectParameter_Tests_AbstractClass_AbstractMethod
	{
		#region Test Methods

		[Fact]
		public void Test_Iteration_1()
		{
			// construct all input parameters which are used in the test
			// TODO: construct return value comparer instance
			Examples.Concolic.Features.Objects.AbstractClass? instance = null;
			
			// initialize all parameters which needs initialization
			// TODO: initialize return value comparer instance
			
			// execute the tested method
			// TODO: make assert for method exception
			// TODO: make assert for method return values
			// TODO: handle instance methods
			Examples.Concolic.Features.Objects.MethodsWithObjectParameter.AbstractClass_AbstractMethod(instance);

			// construct all output parameters which are used in the test
			// 1. ret val if exists


		}

		[Fact]
		public void Test_Iteration_2()
		{
			// construct all input parameters which are used in the test
			// TODO: construct return value comparer instance
			Examples.Concolic.Features.Objects.AbstractClass? instance = Create_0x00000003(out Mock<Examples.Concolic.Features.Objects.AbstractClass> methodsMock_0x00000003);
			
			// initialize all parameters which needs initialization
			// TODO: initialize return value comparer instance
			
			// execute the tested method
			// TODO: make assert for method exception
			// TODO: make assert for method return values
			// TODO: handle instance methods
			Examples.Concolic.Features.Objects.MethodsWithObjectParameter.AbstractClass_AbstractMethod(instance);

			// construct all output parameters which are used in the test
			// 1. ret val if exists


		}

		[Fact]
		public void Test_Iteration_3()
		{
			// construct all input parameters which are used in the test
			// TODO: construct return value comparer instance
			Examples.Concolic.Features.Objects.AbstractClass? instance = Create_0x00000003(out Mock<Examples.Concolic.Features.Objects.AbstractClass> methodsMock_0x00000003);
			
			Examples.Concolic.Features.Objects.TestClass? var_0x00000004 = Create_0x00000004(out Mock<Examples.Concolic.Features.Objects.TestClass> methodsMock_0x00000004);
			
			// initialize all parameters which needs initialization
			// TODO: initialize return value comparer instance
			
			InitializeMethods_0x00000003
			(
				methodsMock_0x00000003,
				arg_AbstractMethod: new Examples.Concolic.Features.Objects.TestClass[] {  var_0x00000004 } 
			);
			// execute the tested method
			// TODO: make assert for method exception
			// TODO: make assert for method return values
			// TODO: handle instance methods
			Examples.Concolic.Features.Objects.MethodsWithObjectParameter.AbstractClass_AbstractMethod(instance);

			// construct all output parameters which are used in the test
			// 1. ret val if exists


		}

		[Fact]
		public void Test_Iteration_4()
		{
			// construct all input parameters which are used in the test
			// TODO: construct return value comparer instance
			Examples.Concolic.Features.Objects.AbstractClass? instance = Create_0x00000003(out Mock<Examples.Concolic.Features.Objects.AbstractClass> methodsMock_0x00000003);
			
			Examples.Concolic.Features.Objects.TestClass? var_0x00000004 = Create_0x00000004(out Mock<Examples.Concolic.Features.Objects.TestClass> methodsMock_0x00000004);
			
			System.Double var_0x00000005 = 0;
			
			Examples.Concolic.Features.Objects.TestClass? var_0x00000006 = Create_0x00000006(out Mock<Examples.Concolic.Features.Objects.TestClass> methodsMock_0x00000006);
			
			// initialize all parameters which needs initialization
			// TODO: initialize return value comparer instance
			
			InitializeMethods_0x00000003
			(
				methodsMock_0x00000003,
				arg_AbstractMethod: new Examples.Concolic.Features.Objects.TestClass[] {  var_0x00000004, var_0x00000006 } 
			);
			InitializeFields_0x00000004
			(
				var_0x00000004,
				arg_OtherField: var_0x00000005 
			);

			// execute the tested method
			// TODO: make assert for method exception
			// TODO: make assert for method return values
			// TODO: handle instance methods
			Examples.Concolic.Features.Objects.MethodsWithObjectParameter.AbstractClass_AbstractMethod(instance);

			// construct all output parameters which are used in the test
			// 1. ret val if exists


		}

		[Fact]
		public void Test_Iteration_5()
		{
			// construct all input parameters which are used in the test
			// TODO: construct return value comparer instance
			Examples.Concolic.Features.Objects.AbstractClass? instance = Create_0x00000003(out Mock<Examples.Concolic.Features.Objects.AbstractClass> methodsMock_0x00000003);
			
			Examples.Concolic.Features.Objects.TestClass? var_0x00000004 = Create_0x00000004(out Mock<Examples.Concolic.Features.Objects.TestClass> methodsMock_0x00000004);
			
			System.Double var_0x00000005 = 0;
			
			Examples.Concolic.Features.Objects.TestClass? var_0x00000006 = Create_0x00000006(out Mock<Examples.Concolic.Features.Objects.TestClass> methodsMock_0x00000006);
			
			System.Double var_0x00000007 = 6;
			
			// initialize all parameters which needs initialization
			// TODO: initialize return value comparer instance
			
			InitializeMethods_0x00000003
			(
				methodsMock_0x00000003,
				arg_AbstractMethod: new Examples.Concolic.Features.Objects.TestClass[] {  var_0x00000004, var_0x00000006 } 
			);
			InitializeFields_0x00000004
			(
				var_0x00000004,
				arg_OtherField: var_0x00000005 
			);

			InitializeFields_0x00000006
			(
				var_0x00000006,
				arg_OtherField: var_0x00000007 
			);

			// execute the tested method
			// TODO: make assert for method exception
			// TODO: make assert for method return values
			// TODO: handle instance methods
			Examples.Concolic.Features.Objects.MethodsWithObjectParameter.AbstractClass_AbstractMethod(instance);

			// construct all output parameters which are used in the test
			// 1. ret val if exists


		}

		[Fact]
		public void Test_Iteration_6()
		{
			// construct all input parameters which are used in the test
			// TODO: construct return value comparer instance
			Examples.Concolic.Features.Objects.AbstractClass? instance = Create_0x00000003(out Mock<Examples.Concolic.Features.Objects.AbstractClass> methodsMock_0x00000003);
			
			Examples.Concolic.Features.Objects.TestClass? var_0x00000004 = Create_0x00000004(out Mock<Examples.Concolic.Features.Objects.TestClass> methodsMock_0x00000004);
			
			System.Double var_0x00000005 = 5;
			
			Examples.Concolic.Features.Objects.TestClass? var_0x00000006 = Create_0x00000006(out Mock<Examples.Concolic.Features.Objects.TestClass> methodsMock_0x00000006);
			
			System.Double var_0x00000007 = 6;
			
			// initialize all parameters which needs initialization
			// TODO: initialize return value comparer instance
			
			InitializeMethods_0x00000003
			(
				methodsMock_0x00000003,
				arg_AbstractMethod: new Examples.Concolic.Features.Objects.TestClass[] {  var_0x00000004, var_0x00000006 } 
			);
			InitializeFields_0x00000004
			(
				var_0x00000004,
				arg_OtherField: var_0x00000005 
			);

			InitializeFields_0x00000006
			(
				var_0x00000006,
				arg_OtherField: var_0x00000007 
			);

			// execute the tested method
			// TODO: make assert for method exception
			// TODO: make assert for method return values
			// TODO: handle instance methods
			Examples.Concolic.Features.Objects.MethodsWithObjectParameter.AbstractClass_AbstractMethod(instance);

			// construct all output parameters which are used in the test
			// 1. ret val if exists


		}
		#endregion Test Methods

		#region Parameter Creation Methods
		// these methods constructs instances of parameters along with interfaces for their initialization
		private Examples.Concolic.Features.Objects.AbstractClass Create_0x00000003(out Mock<Examples.Concolic.Features.Objects.AbstractClass> methodsMock)
		{
			methodsMock = new Mock<Examples.Concolic.Features.Objects.AbstractClass>();
			var instance = methodsMock.Object;
			return instance;
		}
		
		private Examples.Concolic.Features.Objects.TestClass Create_0x00000004(out Mock<Examples.Concolic.Features.Objects.TestClass> methodsMock)
		{
			methodsMock = new Mock<Examples.Concolic.Features.Objects.TestClass>();
			var instance = methodsMock.Object;
			return instance;
		}
		
		private Examples.Concolic.Features.Objects.TestClass Create_0x00000006(out Mock<Examples.Concolic.Features.Objects.TestClass> methodsMock)
		{
			methodsMock = new Mock<Examples.Concolic.Features.Objects.TestClass>();
			var instance = methodsMock.Object;
			return instance;
		}
		


		#endregion Parameter Creation Methods

		#region Parameter Initialization Methods
		// initialize parameter 0x00000003
		// - instance
		private void InitializeMethods_0x00000003(Mock<Examples.Concolic.Features.Objects.AbstractClass> mock, Examples.Concolic.Features.Objects.TestClass[] arg_AbstractMethod = default)
		{
			// TODO: initialize method results to correspond to provided values
			// first invocation returns arg_<MethodName>[0] etc
			// right now, always return first element... :(
			mock.Setup(o => o.AbstractMethod()).Returns(arg_AbstractMethod[0]);
		}
		// initialize parameter 0x00000004
		// - instance.AbstractMethod()[0]
		// - 
		private void InitializeFields_0x00000004(Examples.Concolic.Features.Objects.TestClass instance, System.Double arg_OtherField = default)
		{
			// initialize field using private object
			instance.SetPrivate("OtherField", arg_OtherField);
		}
		// initialize parameter 0x00000006
		// - instance.AbstractMethod()[1]
		// - 
		private void InitializeFields_0x00000006(Examples.Concolic.Features.Objects.TestClass instance, System.Double arg_OtherField = default)
		{
			// initialize field using private object
			instance.SetPrivate("OtherField", arg_OtherField);
		}
		#endregion Parameter Initialization Methods
	}
}


