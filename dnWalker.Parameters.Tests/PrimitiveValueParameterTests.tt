<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".tt.cs" #>
using FluentAssertions;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using Xunit;

namespace dnWalker.Parameters.Tests
{
    public abstract class PrimitiveValueParameterTests<TParameter, TValue> : ParameterTests<TParameter>
        where TValue : struct
        where TParameter : PrimitiveValueParameter<TValue>
    {
        [Fact]
        public void GetChildren_ShouldBe_Empty()
        {
            TParameter p = Create();
            p.GetChildren().Should().HaveCount(0);
        }

        [Fact]
        public void TypeName_ShouldBeEquiavalent_To_TValue()
        {
            TParameter p = Create();
            p.TypeName.Should().Be(typeof(TValue).FullName);
        }
    }

<#
 string[] types = 
 {
    "Boolean",
    "Char",
    "Byte",
    "SByte",
    "Int16",
    "Int32",
    "Int64",
    "UInt16",
    "UInt32",
    "UInt64",
    "Single",
    "Double",
 };

 string[] aliases = 
 {
    "bool",
    "char",
    "byte",
    "sbyte",
    "short",
    "int",
    "long",
    "ushort",
    "uint",
    "ulong",
    "float",
    "double",
 };

 for (int i = 0; i < types.Length; ++i)
 {
    string type = types[i];
    string alias = aliases[i];

  #>
    public class <#= type #>ParameterTests : PrimitiveValueParameterTests<<#= type #>Parameter, <#= alias #>>
    {
        protected override <#= type #>Parameter Create(int id) => new <#= type #>Parameter(default(<#= alias #>), id);
    }

<#
 }

 #>
}