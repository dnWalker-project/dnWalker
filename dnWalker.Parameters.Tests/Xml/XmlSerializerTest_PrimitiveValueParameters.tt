<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".tt.cs" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Linq;

using dnWalker.Parameters;
using dnWalker.Parameters.Xml;

using FluentAssertions;

using Xunit;

namespace dnWalker.Parameters.Tests.Xml
{
    public class XmlSerializerTest_PrimitiveValueParameters
    {
<#
    string NULL = "null";
    string XMLNULL = "Unknown";

    string[] types = 
    {
        "Boolean",
        "Char",
        "Byte",
        "SByte",
        "Int16",
        "Int32",
        "Int64",
        "UInt16",
        "UInt32",
        "UInt64",
        "Single",
        "Double",
    };

    string[] aliases = 
    {
        "bool",
        "char",
        "byte",
        "sbyte",
        "short",
        "int",
        "long",
        "ushort",
        "uint",
        "ulong",
        "float",
        "double",
    };

    string[][] expectedValues = new string[][]
    {
        new string[] { "true", "false" },
        new string[] { @"'\0'", @"'\n'", @"'a'", "char.MinValue", "char.MaxValue" },
        new string[] { "byte.MinValue", "byte.MaxValue", "127" },
        new string[] { "sbyte.MinValue", "sbyte.MaxValue", "63", "-63" },
        new string[] { "short.MinValue", "short.MaxValue", "1023", "-1023" },
        new string[] { "int.MinValue", "int.MaxValue", "1023", "-1023" },
        new string[] { "long.MinValue", "long.MaxValue", "1023", "-1023" },
        new string[] { "ushort.MinValue", "ushort.MaxValue", "1023" },
        new string[] { "uint.MinValue", "uint.MaxValue", "1023u" },
        new string[] { "ulong.MinValue", "ulong.MaxValue", "1023ul" },
        new string[] { "1023" , "-1023", "float.PositiveInfinity", "float.NegativeInfinity" },
        new string[] { "1023", "-1023", "double.PositiveInfinity", "double.NegativeInfinity" },

    };

    string[][] xmlValues = new string[][]
    {
        new string[] { "True", "False" },
        new string[] { string.Format(@"U+{0:x4}", (int)'\0').ToUpper(), string.Format(@"U+{0:x4}", (int)'\n').ToUpper(), string.Format(@"U+{0:x4}", (int)'a').ToUpper(), string.Format(@"U+{0:x4}", (int)char.MinValue).ToUpper(), string.Format(@"U+{0:x4}", (int)char.MaxValue).ToUpper(), XMLNULL },
        new string[] { byte.MinValue.ToString(), byte.MaxValue.ToString(), "127" },
        new string[] { sbyte.MinValue.ToString(), sbyte.MaxValue.ToString(), "63", "-63" },
        new string[] { short.MinValue.ToString(), short.MaxValue.ToString(), "1023", "-1023" },
        new string[] { int.MinValue.ToString(), int.MaxValue.ToString(), "1023", "-1023" },
        new string[] { long.MinValue.ToString(), long.MaxValue.ToString(), "1023", "-1023" },
        new string[] { ushort.MinValue.ToString(), ushort.MaxValue.ToString(), "1023" },
        new string[] { uint.MinValue.ToString(), uint.MaxValue.ToString(), "1023" },
        new string[] { ulong.MinValue.ToString(), ulong.MaxValue.ToString(), "1023" },
        new string[] { "1023" , "-1023", "INF", "-INF" },
        new string[] { "1023" , "-1023", "INF", "-INF" },
    };

    for (int i = 0; i < types.Length; ++i)
    {
        string type = types[i];
        string alias = aliases[i];
#>

        [Theory]<#
        for (int j = 0; j < expectedValues[i].Length; ++j)
        {
#>  
        [InlineData("<#= GetXml(types[i], $"0x{j:X8}", xmlValues[i][j]) #>", <#= j.ToString() #>, <#= expectedValues[i][j] #>)]<#
        }
#>

        public void Test_<#= types[i] #>Parameter(string xml, int intRef, <#= alias #> value)
        {
            ParameterRef reference = intRef;

            IParameterContext ctx = new ParameterContext();
            
            I<#= types[i] #>Parameter? p = ctx.Create<#= types[i] #>Parameter(reference, value);

            p.Should().NotBeNull();
            p.Reference.Should().Be(reference);
            p.Value.HasValue.Should().BeTrue();
            p.Value.Value.Should().Be(value);

            XElement serialization = p.ToXml();
            XNode.DeepEquals(serialization, XElement.Parse(xml)).Should().BeTrue();
        }
<#
    }
#>
    }
}

<#+
    private static string GetXml(string type, string reference, string xmlValue)
    {
        return string.Format(@"<PrimitiveValue Type=\""System.{0}\"" Reference=\""{1}\"" Value=\""{2}\"" />", type, reference, xmlValue);
    }
#>