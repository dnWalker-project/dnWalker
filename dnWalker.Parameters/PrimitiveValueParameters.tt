<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".tt.cs" #>

using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Linq;

namespace dnWalker.Parameters
{

    public abstract class PrimitiveValueParameter<TValue> : Parameter, IPrimitiveValueParameter<TValue> where TValue : struct
    {
        protected PrimitiveValueParameter() : base(typeof(TValue).FullName!)
        { }

        protected PrimitiveValueParameter(TValue value) : base(typeof(TValue).FullName!)
        {
            Value = value;
        }
        protected PrimitiveValueParameter(TValue value, int id)  : base(typeof(TValue).FullName!, id)
        {
            Value = value;
        }

        public sealed override IEnumerable<IParameter> GetChildren()
        {
            return Enumerable.Empty<IParameter>();
        }

        public TValue Value
        {
            get;
            set;
        }
    }

<#
 string[] types = 
 {
    "Boolean",
    "Char",
    "Byte",
    "SByte",
    "Int16",
    "Int32",
    "Int64",
    "UInt16",
    "UInt32",
    "UInt64",
    "Single",
    "Double",
 };

 string[] aliases = 
 {
    "bool",
    "char",
    "byte",
    "sbyte",
    "short",
    "int",
    "long",
    "ushort",
    "uint",
    "ulong",
    "float",
    "double",
 };

 for (int i = 0; i < types.Length; ++i)
 {
    string type = types[i];
    string alias = aliases[i];

  #>
    public class <#= type #>Parameter : PrimitiveValueParameter<<#= alias #>>, I<#= type #>Parameter
    {
        public <#= type #>Parameter() : base()
        { }
        public <#= type #>Parameter(<#= alias #> value) : base(value)
        { }
        public <#= type #>Parameter(<#= alias #> value, int id) : base(value, id)
        { }

        public override IParameter ShallowCopy(int id)
        {
            return new <#= type #>Parameter(Value, id);
        }
    }
 
 <#
 }

 #>
}