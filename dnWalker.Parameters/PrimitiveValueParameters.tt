<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".tt.cs" #>
using dnWalker.TypeSystem;

using System;
using System.Linq;

namespace dnWalker.Parameters
{
<#
 string[] types = 
 {
    "Boolean",
    "Char",
    "Byte",
    "SByte",
    "Int16",
    "Int32",
    "Int64",
    "UInt16",
    "UInt32",
    "UInt64",
    "Single",
    "Double",
 };

 string[] aliases = 
 {
    "bool",
    "char",
    "byte",
    "sbyte",
    "short",
    "int",
    "long",
    "ushort",
    "uint",
    "ulong",
    "float",
    "double",
 };

 for (int i = 0; i < types.Length; ++i)
 {
    string type = types[i];
    string alias = aliases[i];

#>

    public class <#= type #>Parameter : Parameter, I<#= type #>Parameter
    {
        internal <#= type #>Parameter(IParameterSet set) : base(set, new TypeSignature(set.Context.DefinitionProvider.BaseTypes.<#= type #>.TypeDefOrRef))
        {
        }

        internal <#= type #>Parameter(IParameterSet set, ParameterRef reference) : base(set, new TypeSignature(set.Context.DefinitionProvider.BaseTypes.<#= type #>.TypeDefOrRef), reference)
        {
        }
        
        public <#= alias #>? Value
        {
            get;
            set;
        }

        public override <#= type #>Parameter CloneData(IParameterSet set)
        {
             <#= type #>Parameter parameter = new <#= type #>Parameter(set, Reference)
             {
                Value = this.Value
             };
             
            return parameter;
        }

        public override string ToString()
        {
            return $"Parameter<<#= type #>>, Reference = {Reference}, Value = {Value}";
        }
    }
<#
 }
#>


    public static partial class ParameterContextExtensions
    {
<# 
for (int i = 0; i < types.Length; ++i)
{
    string type = types[i];
    string alias = aliases[i];

#>
        public static I<#= type #>Parameter Create<#= type #>Parameter(this IParameterSet set)
        {
            return Create<#= type #>Parameter(set, set.GetParameterRef());
        }
        
        public static I<#= type #>Parameter Create<#= type #>Parameter(this IParameterSet set, ParameterRef reference)
        {
            <#= type #>Parameter parameter = new <#= type #>Parameter(set, reference);
            set.Parameters.Add(parameter.Reference, parameter);
            
            return parameter;
        }
<#
}
#>
    }
}