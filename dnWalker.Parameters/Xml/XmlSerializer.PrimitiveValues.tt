<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".tt.cs" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Linq;

using static dnWalker.Parameters.Xml.XmlTokens;

namespace dnWalker.Parameters.Xml
{

    public static partial class XmlSerializer
    {
<#
 string[] types = 
 {
    "Boolean",
    "Byte",
    "SByte",
    "Int16",
    "Int32",
    "Int64",
    "UInt16",
    "UInt32",
    "UInt64",
    "Char",
    "Single",
    "Double"
 };

 string[] aliases = 
 {
    "bool",
    "byte",
    "sbyte",
    "short",
    "int",
    "long",
    "ushort",
    "uint",
    "ulong",
    "char",
    "float",
    "double",
 };

 string[] toXmlExpressions = 
 {
    "parameter.Value is null ? XmlUnknown : parameter.Value.ToString()!",
    "parameter.Value is null ? XmlUnknown : parameter.Value.ToString()!",
    "parameter.Value is null ? XmlUnknown : parameter.Value.ToString()!",
    "parameter.Value is null ? XmlUnknown : parameter.Value.ToString()!",
    "parameter.Value is null ? XmlUnknown : parameter.Value.ToString()!",
    "parameter.Value is null ? XmlUnknown : parameter.Value.ToString()!",
    "parameter.Value is null ? XmlUnknown : parameter.Value.ToString()!",
    "parameter.Value is null ? XmlUnknown : parameter.Value.ToString()!",
    "parameter.Value is null ? XmlUnknown : parameter.Value.ToString()!",
    "parameter.Value is null ? XmlUnknown : string.Format(@\"U+{0:x4}\", (int)parameter.Value.Value).ToUpper()",
    "parameter.Value is null ? XmlUnknown : FloatToXml(parameter.Value.Value)",
    "parameter.Value is null ? XmlUnknown : DoubleToXml(parameter.Value.Value)",
 };

 for (int i = 0; i < types.Length; ++i)
 {
    string type = types[i];
    string alias = aliases[i];

#>
        public static XElement ToXml(this I<#= type #>Parameter parameter)
        {
            string valueXmlString = <#= toXmlExpressions[i] #>;
            return new XElement(XmlPrimitiveValue, new XAttribute(XmlType, parameter.Type), new XAttribute(XmlReference, parameter.Reference), new XAttribute(XmlValue, valueXmlString));
        }
<#
 }
#> 

        private static string FloatToXml(float flt)
        {
            if (float.IsNaN(flt))
            {
                return "NAN";
            }
            else if (float.IsPositiveInfinity(flt))
            {
                return "INF";
            }
            else if (float.IsNegativeInfinity(flt))
            {
                return "-INF";
            }
            else
            {
                return flt.ToString()!;
            }
        }
        private static string DoubleToXml(double dbl)
        {
            if (double.IsNaN(dbl))
            {
                return "NAN";
            }
            else if (double.IsPositiveInfinity(dbl))
            {
                return "INF";
            }
            else if (double.IsNegativeInfinity(dbl))
            {
                return "-INF";
            }
            else
            {
                return dbl.ToString()!;
            }
        }
    }
}


