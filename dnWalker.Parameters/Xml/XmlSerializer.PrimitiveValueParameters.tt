<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".tt.cs" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Linq;

namespace dnWalker.Parameters.Xml
{

    public static partial class XmlSeserializer
    {
<#
 string[] types = 
 {
    "Boolean",
    "Byte",
    "SByte",
    "Int16",
    "Int32",
    "Int64",
    "UInt16",
    "UInt32",
    "UInt64"
    //"Char"
    //"Single",
    //"Double",
 };

 string[] aliases = 
 {
    "bool",
    "byte",
    "sbyte",
    "short",
    "int",
    "long",
    "ushort",
    "uint",
    "ulong"
    //"char",
    //"float",
    //"double",
 };

 for (int i = 0; i < types.Length; ++i)
 {
    string type = types[i];
    string alias = aliases[i];

  #>
        public static XElement ToXml(this <#= type #>Parameter parameter)
        {
            return new XElement("PrimitiveValue", new XAttribute("Type", TypeNames.<#= type #>TypeName), new XAttribute("Name", parameter.LocalName), parameter.Value);
        }
<#
 }
        // write Char, Single and Double values manually - using custom convesion methods
 #> 
        public static XElement ToXml(this CharParameter parameter)
        {
            char symbol = parameter.Value;

            string unicodeFormat = string.Format(@"U+{0:x4}", (int)symbol).ToUpper();

            return new XElement("PrimitiveValue", new XAttribute("Type", parameter.TypeName), new XAttribute("Name", parameter.LocalName), unicodeFormat);
        }

        public static XElement ToXml(this SingleParameter parameter)
        {
            float number = parameter.Value;

            string numberRepr;
            if (float.IsNaN(number))
            {
                numberRepr = "NAN";
            }
            else if (float.IsPositiveInfinity(number))
            {
                numberRepr = "INF";
            }
            else if (float.IsNegativeInfinity(number))
            {
                numberRepr = "-INF";
            }
            else
            {
                numberRepr = number.ToString();
            }

            return new XElement("PrimitiveValue", new XAttribute("Type", parameter.TypeName), new XAttribute("Name", parameter.LocalName), numberRepr);
        }

        public static XElement ToXml(this DoubleParameter parameter)
        {
            double number = parameter.Value;

            string numberRepr;
            if (double.IsNaN(number))
            {
                numberRepr = "NAN";
            }
            else if (double.IsPositiveInfinity(number))
            {
                numberRepr = "INF";
            }
            else if (double.IsNegativeInfinity(number))
            {
                numberRepr = "-INF";
            }
            else
            {
                numberRepr = number.ToString();
            }

            return new XElement("PrimitiveValue", new XAttribute("Type", parameter.TypeName), new XAttribute("Name", parameter.LocalName), numberRepr);
        }
    }
}
