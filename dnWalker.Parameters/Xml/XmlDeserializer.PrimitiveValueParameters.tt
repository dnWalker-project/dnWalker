<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".tt.cs" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Linq;

namespace dnWalker.Parameters.Xml
{

    public static partial class XmlDeserializer
    {
<#
 string[] types = 
 {
    "Boolean",
    "Byte",
    "SByte",
    "Int16",
    "Int32",
    "Int64",
    "UInt16",
    "UInt32",
    "UInt64"
    //"Char"
    //"Single",
    //"Double",
 };

 string[] aliases = 
 {
    "bool",
    "byte",
    "sbyte",
    "short",
    "int",
    "long",
    "ushort",
    "uint",
    "ulong"
    //"char",
    //"float",
    //"double",
 };

 for (int i = 0; i < types.Length; ++i)
 {
    string type = types[i];
    string alias = aliases[i];

  #>
        public static <#= type #>Parameter To<#= type #>Parameter(this XElement xml)
        {
            string name = xml.Attribute("Name")?.Value ?? throw new Exception("Parameter XML must contain 'Name' attribute.");
            <#= alias #> value = <#= alias #>.Parse(xml.Value);
            return new <#= type #>Parameter(name, value);
        }
        
        public static <#= type #>Parameter To<#= type #>Parameter(this XElement xml, Parameter parent)
        {
            string name = xml.Attribute("Name")?.Value ?? throw new Exception("Parameter XML must contain 'Name' attribute.");
            <#= alias #> value = <#= alias #>.Parse(xml.Value);
            return new <#= type #>Parameter(name, value, parent);
        }
<#
 }
        // write Char, Single and Double values manually - using custom convesion methods
 #> 
        public static CharParameter ToCharParameter(this XElement xml)
        {
            string name = xml.Attribute("Name")?.Value ?? throw new Exception("Parameter XML must contain 'Name' attribute.");

            char value = Convert.ToChar(Convert.ToInt32(xml.Value.Substring(2), 16));

            return new CharParameter(name, value);
        }

        public static CharParameter ToCharParameter(this XElement xml, Parameter parent)
        {
            string name = xml.Attribute("Name")?.Value ?? throw new Exception("Parameter XML must contain 'Name' attribute.");

            char value = Convert.ToChar(Convert.ToInt32(xml.Value.Substring(2), 16));

            return new CharParameter(name, value, parent);
        }

        public static SingleParameter ToSingleParameter(this XElement xml)
        {
            string name = xml.Attribute("Name")?.Value ?? throw new Exception("Parameter XML must contain 'Name' attribute.");

            string strValue = xml.Value;

            float value;
            switch (strValue)
            {
                case "NAN": value = float.NaN; break;
                case "INF": value = float.PositiveInfinity; break;
                case "-INF": value = float.NegativeInfinity; break;


                default: value = float.Parse(strValue); break;
            }

            return new SingleParameter(name, value);
        }

        public static SingleParameter ToSingleParameter(this XElement xml, Parameter parent)
        {
            string name = xml.Attribute("Name")?.Value ?? throw new Exception("Parameter XML must contain 'Name' attribute.");

            string strValue = xml.Value;

            float value;
            switch (strValue)
            {
                case "NAN": value = float.NaN; break;
                case "INF": value = float.PositiveInfinity; break;
                case "-INF": value = float.NegativeInfinity; break;


                default: value = float.Parse(strValue); break;
            }

            return new SingleParameter(name, value, parent);
        }

        public static DoubleParameter ToDoubleParameter(this XElement xml)
        {
            string name = xml.Attribute("Name")?.Value ?? throw new Exception("Parameter XML must contain 'Name' attribute.");

            string strValue = xml.Value;

            double value;
            switch (strValue)
            {
                case "NAN": value = double.NaN; break;
                case "INF": value = double.PositiveInfinity; break;
                case "-INF": value = double.NegativeInfinity; break;


                default: value = double.Parse(strValue); break;
            }

            return new DoubleParameter(name, value);
        }
        

        public static DoubleParameter ToDoubleParameter(this XElement xml, Parameter parent)
        {
            string name = xml.Attribute("Name")?.Value ?? throw new Exception("Parameter XML must contain 'Name' attribute.");

            string strValue = xml.Value;

            double value;
            switch (strValue)
            {
                case "NAN": value = double.NaN; break;
                case "INF": value = double.PositiveInfinity; break;
                case "-INF": value = double.NegativeInfinity; break;


                default: value = double.Parse(strValue); break;
            }

            return new DoubleParameter(name, value, parent);
        }
    }
}
